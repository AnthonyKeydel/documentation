---
title: Logic Steps
kind: documentation
disable_toc: false
type: workflows
is_beta: false
aliases:
- /workflows/logic_actions
further_reading:
- link: "/integrations/"
  tag: "Documentation"
  text: "Learn about integrations"
---

Logic steps allow you to control the flow within your workflow. These actions allow you to implement custom logic within your workflow such as branching upon a decision and iteration.

## Branch workflow from condition

You can branch the execution path of your workflow based on the evaluation of one or more statements that you define. For example, in the screenshot below a branch workflow action considers if the status code of a previous HTTP request action is `200`.

{{< img src="service_management/workflows/branch-workflow-configuration2.png" alt="The workflow canvas with a branch workflow from condition action selected and the configuration tab open. The Statements section is highlighted with two statements specifying that the status of a previous request must be 200 and the returned value of a previous function must be true." >}}

## Sleep

Pause the execution of the workflow for a specified duration. If you wish to pass the duration as a variable, the value will be processed in seconds.

## For Each Iteration

The For Each step in our Workflow Automation Product allows you to execute a specific action iteratively for each element in a given input list. It enables you to automate repetitive tasks by applying the same action to multiple items within a list. For 
__The For Each step can execute a single action within__.

### Configuring For Each iteration

1. Open the actions catalog by opening the [action catalog][1].
1. Search and select the "For Each" step.
1. Place the inner step by clicking on the **+** of the For Each step and selecting the action from the action catalog. Alternatively, drag an existing action from the canvas into the For Each step.
1. Specify the input list to be iterated, in the **Input List** field in the For Each step's configuration.
1. Continue to specifiy the inner step configuration.

#### Access values of the input list in the iteration in inner step

1. Access the current element being processed in the iteration, by the context variable **{{Current.value}}**.
1. Access the current index being processed in the iteration, by the context variable **{{Current.index}}**

#### Handling faled iterations

You can configure whether to continue the iterations if an individual iteration fails of fail the entire For Each step. This can be done by toggling the **Continue on error** toggle in the For Each step's configuration.

**Example**: If you want to block a list of IPs using CloudFlare, then you can run the CloudFlare action by placing it within the for each step. The input list in the For Each iteration configuration will be the list of IPs. You will then dynamically refer to the IP that needs to be blocked in the CloudFlare action configuration as {{Current.value}}.

### Looking at Iteration outputs
You can see the iteration outputs in debug mode. You will be able to see the following:
* The output of each iteration
* The number of iterations completed succesfully vs failed.
* The output of the entire iteration is an array of outputs of the inner step. 

### Clear/Remove inner step

Hover over the step within the For Each iteration and click on the step's delete button.
Alternatively, click on the For Each step and choose "Clear."

### DeleteFor Each iteration

Click on the For Each step in the canvas, and then select **Delete**.


## Further Reading

{{< partial name="whats-next/whats-next.html" >}}

[1]: /service_management/workflows/build/#build-a-workflow-with-the-workflow-builder
